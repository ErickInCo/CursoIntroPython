
C:\Users\1\Documents\GitHub Profesional\CursoIntroPython\Módulo 10 - Manejo de errores>py
Python 3.10.2 (tags/v3.10.2:a58ebcc, Jan 17 2022, 14:12:15) [MSC v.1929 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> open("/path/to/mars.jpg")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
FileNotFoundError: [Errno 2] No such file or directory: '/path/to/mars.jpg'
>>> ^Z


C:\Users\1\Documents\GitHub Profesional\CursoIntroPython\Módulo 10 - Manejo de errores>python3 open.py
Python was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Manage App Execution Aliases.

C:\Users\1\Documents\GitHub Profesional\CursoIntroPython\Módulo 10 - Manejo de errores>py open.py
Traceback (most recent call last):
  File "C:\Users\1\Documents\GitHub Profesional\CursoIntroPython\Módulo 10 - Manejo de errores\open.py", line 5, in <module>
    main()
  File "C:\Users\1\Documents\GitHub Profesional\CursoIntroPython\Módulo 10 - Manejo de errores\open.py", line 2, in main
    open("/path/to/mars.jpg")
FileNotFoundError: [Errno 2] No such file or directory: '/path/to/mars.jpg'

C:\Users\1\Documents\GitHub Profesional\CursoIntroPython\Módulo 10 - Manejo de errores>py
Python 3.10.2 (tags/v3.10.2:a58ebcc, Jan 17 2022, 14:12:15) [MSC v.1929 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> try:
...     open('config.txt')
... except FileNotFoundError:
...     print("No se pudo encontrar el archivo config.txt")
...
No se pudo encontrar el archivo config.txt
>>> ^Z


C:\Users\1\Documents\GitHub Profesional\CursoIntroPython\Módulo 10 - Manejo de errores>py config.py
Couldn't find the config.txt file!

C:\Users\1\Documents\GitHub Profesional\CursoIntroPython\Módulo 10 - Manejo de errores>py config.py

C:\Users\1\Documents\GitHub Profesional\CursoIntroPython\Módulo 10 - Manejo de errores>py config.py

C:\Users\1\Documents\GitHub Profesional\CursoIntroPython\Módulo 10 - Manejo de errores>py config.py
Traceback (most recent call last):
  File "C:\Users\1\Documents\GitHub Profesional\CursoIntroPython\Módulo 10 - Manejo de errores\config.py", line 9, in <module>
    main()
  File "C:\Users\1\Documents\GitHub Profesional\CursoIntroPython\Módulo 10 - Manejo de errores\config.py", line 3, in main
    configuration = open('config.txt')
PermissionError: [Errno 13] Permission denied: 'config.txt'

C:\Users\1\Documents\GitHub Profesional\CursoIntroPython\Módulo 10 - Manejo de errores>py config.py
Traceback (most recent call last):
  File "C:\Users\1\Documents\GitHub Profesional\CursoIntroPython\Módulo 10 - Manejo de errores\config.py", line 11, in <module>
    main()
  File "C:\Users\1\Documents\GitHub Profesional\CursoIntroPython\Módulo 10 - Manejo de errores\config.py", line 3, in main
    configuration = open('config.txt')
PermissionError: [Errno 13] Permission denied: 'config.txt'

C:\Users\1\Documents\GitHub Profesional\CursoIntroPython\Módulo 10 - Manejo de errores>py config.py
Traceback (most recent call last):
  File "C:\Users\1\Documents\GitHub Profesional\CursoIntroPython\Módulo 10 - Manejo de errores\config.py", line 11, in <module>
    main()
  File "C:\Users\1\Documents\GitHub Profesional\CursoIntroPython\Módulo 10 - Manejo de errores\config.py", line 3, in main
    configuration = open('config.txt')
PermissionError: [Errno 13] Permission denied: 'config.txt'

C:\Users\1\Documents\GitHub Profesional\CursoIntroPython\Módulo 10 - Manejo de errores>py config.py
Traceback (most recent call last):
  File "C:\Users\1\Documents\GitHub Profesional\CursoIntroPython\Módulo 10 - Manejo de errores\config.py", line 11, in <module>
    main()
  File "C:\Users\1\Documents\GitHub Profesional\CursoIntroPython\Módulo 10 - Manejo de errores\config.py", line 3, in main
    configuration = open('config.txt')
PermissionError: [Errno 13] Permission denied: 'config.txt'

C:\Users\1\Documents\GitHub Profesional\CursoIntroPython\Módulo 10 - Manejo de errores>py generacionDeExcepciones.py

C:\Users\1\Documents\GitHub Profesional\CursoIntroPython\Módulo 10 - Manejo de errores>py
Python 3.10.2 (tags/v3.10.2:a58ebcc, Jan 17 2022, 14:12:15) [MSC v.1929 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> generacionDeExcepciones.py
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'generacionDeExcepciones' is not defined
>>> def water_left(astronauts, water_left, days_left):
...     daily_usage = astronauts * 11
...     total_usage = daily_usage * days_left
...     total_water_left = water_left - total_usage
...     return f"Total water left after {days_left} days is: {total_water_left} liters"
...
>>> water_left(5, 100, 2)
'Total water left after 2 days is: -10 liters'
>>> def water_left(astronauts, water_left, days_left):
...     daily_usage = astronauts * 11
...     total_usage = daily_usage * days_left
...     total_water_left = water_left - total_usage
...     if total_water_left < 0:
...         raise RuntimeError(f"There is not enough water for {astronauts} astronauts after {days_left} days!")
...     return f"Total water left after {days_left} days is: {total_water_left} liters"
...
>>> water_left(5, 100, 2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 6, in water_left
RuntimeError: There is not enough water for 5 astronauts after 2 days!
>>> try:
...     water_left(5, 100, 2)
... except RuntimeError as err:
...     alert_navigation_system(err)
...
Traceback (most recent call last):
  File "<stdin>", line 2, in <module>
  File "<stdin>", line 6, in water_left
RuntimeError: There is not enough water for 5 astronauts after 2 days!

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "<stdin>", line 4, in <module>
NameError: name 'alert_navigation_system' is not defined
>>> ^Z


C:\Users\1\Documents\GitHub Profesional\CursoIntroPython\Módulo 10 - Manejo de errores>py
Python 3.10.2 (tags/v3.10.2:a58ebcc, Jan 17 2022, 14:12:15) [MSC v.1929 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> def water_left(astronauts, water_left, days_left):
...     for argument in [astronauts, water_left, days_left]:
...         try:
...             # If argument is an int, the following operation will work
...             argument / 10
...         except TypeError:
...             # TypError will be raised only if it isn't the right type
...             # Raise the same exception but with a better error message
...             raise TypeError(f"All arguments must be of type int, but received: '{argument}'")
...     daily_usage = astronauts * 11
...     total_usage = daily_usage * days_left
...     total_water_left = water_left - total_usage
...     if total_water_left < 0:
...         raise RuntimeError(f"There is not enough water for {astronauts} astronauts after {days_left} days!")
...     return f"Total water left after {days_left} days is: {total_water_left} liters"
...
>>> water_left("3", "200", None)
Traceback (most recent call last):
  File "<stdin>", line 5, in water_left
TypeError: unsupported operand type(s) for /: 'str' and 'int'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 9, in water_left
TypeError: All arguments must be of type int, but received: '3'
